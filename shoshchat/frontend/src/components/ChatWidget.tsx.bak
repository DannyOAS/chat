import { useEffect, useMemo, useRef, useState } from "react";
import useChat from "../hooks/useChat";

interface ChatWidgetProps {
  tenantId: string;
  accent?: "retail" | "finance";
}

const themeStyles = {
  retail: {
    primary: "from-blue-500 to-purple-600",
    secondary: "from-blue-400 to-purple-500",
    bubble: "bg-gradient-to-r from-blue-500/10 to-purple-500/10",
    button: "bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700",
    ring: "focus:ring-blue-500/50",
    accent: "text-blue-400"
  },
  finance: {
    primary: "from-emerald-500 to-teal-600",
    secondary: "from-emerald-400 to-teal-500",
    bubble: "bg-gradient-to-r from-emerald-500/10 to-teal-500/10",
    button: "bg-gradient-to-r from-emerald-500 to-teal-600 text-white hover:from-emerald-600 hover:to-teal-700",
    ring: "focus:ring-emerald-500/50",
    accent: "text-emerald-400"
  }
} as const;

const ChatWidget = ({ tenantId, accent = "retail" }: ChatWidgetProps) => {
  const { messages, sendMessage, isTyping, error, resetConversation } = useChat(tenantId);
  const [isOpen, setIsOpen] = useState(false);
  const [draft, setDraft] = useState("");
  const inputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const styles = useMemo(() => themeStyles[accent], [accent]);

  useEffect(() => {
    if (isOpen) {
      inputRef.current?.focus();
    }
  }, [isOpen]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const hasPendingMessage = messages.some((message) => message.status === "pending");

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <button
          onClick={() => setIsOpen(true)}
          className={`group relative w-16 h-16 rounded-full shadow-2xl bg-gradient-to-r ${styles.primary} hover:scale-110 transition-all duration-300 flex items-center justify-center animate-pulse hover:animate-none`}
        >
          <div className="absolute inset-0 rounded-full bg-gradient-to-r from-white/20 to-transparent"></div>
          <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
          </svg>
          <div className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center">
            <span className="text-white text-xs font-bold">!</span>
          </div>
        </button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50 animate-in slide-in-from-bottom-4 duration-300">
      <div className="w-96 h-[32rem] bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 flex flex-col overflow-hidden">
        {/* Header */}
        <div className={`p-6 bg-gradient-to-r ${styles.primary} relative overflow-hidden`}>
          <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-transparent"></div>
          <div className="relative flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 rounded-full bg-white/20 flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div>
                <h3 className="text-white font-semibold text-lg">ShoshChat AI</h3>
                <p className="text-white/80 text-sm">Tenant: {tenantId}</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <span
                className={`rounded-full px-3 py-1 text-xs font-medium backdrop-blur bg-white/20 ${
                  error ? "text-red-100" : "text-white"
                }`}
              >
                {error ? "Offline" : isTyping ? "Respondingâ€¦" : "Online"}
              </span>
              <button
                onClick={resetConversation}
                className="text-xs text-white/70 hover:text-white"
              >
                Clear
              </button>
              <button
                onClick={() => setIsOpen(false)}
                className="w-8 h-8 rounded-full bg-white/20 hover:bg-white/30 transition-colors flex items-center justify-center"
              >
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-slate-50 to-white">
          {messages.length === 0 && (
            <div className="text-center py-8">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-gray-100 to-gray-200 flex items-center justify-center">
                <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
              </div>
              <p className="text-gray-500 text-sm">Start a conversation with us!</p>
            </div>
          )}
          {messages.map((msg, index) => (
            <div
              key={msg.id}
              className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"} animate-in fade-in-0 slide-in-from-bottom-2 duration-300`}
              style={{ animationDelay: `${index * 100}ms` }}
            >
              <div className={`max-w-xs px-4 py-3 rounded-2xl shadow-sm ${
                msg.role === "user"
                  ? `bg-gradient-to-r ${styles.primary} text-white`
                  : msg.status === "error"
                  ? "bg-red-50 border border-red-200 text-red-700"
                  : "bg-white border border-gray-200 text-gray-800"
              } ${msg.status === "pending" ? "opacity-80" : "opacity-100"}`}>
                {msg.status === "pending" ? (
                  <div className="flex space-x-1">
                    <span className="h-2 w-2 rounded-full bg-gray-400 animate-bounce [animation-delay:-0.1s]"></span>
                    <span className="h-2 w-2 rounded-full bg-gray-400 animate-bounce"></span>
                    <span className="h-2 w-2 rounded-full bg-gray-400 animate-bounce [animation-delay:0.1s]"></span>
                  </div>
                ) : (
                  <p className="text-sm leading-relaxed">{msg.content}</p>
                )}
              </div>
            </div>
          ))}

          {isTyping && !hasPendingMessage && (
            <div className="flex justify-start animate-in fade-in-0 slide-in-from-bottom-2 duration-300">
              <div className="bg-white border border-gray-200 px-4 py-3 rounded-2xl shadow-sm">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Input */}
        <div className="p-4 bg-white border-t border-gray-100">
          {error ? (
            <div className="mb-3 rounded-xl border border-red-200 bg-red-50 px-3 py-2 text-xs text-red-700">
              {error}
            </div>
          ) : null}
          <form
            className="flex space-x-3"
            onSubmit={(event) => {
              event.preventDefault();
              if (!draft.trim()) return;
              void sendMessage(draft);
              setDraft("");
            }}
          >
            <input
              ref={inputRef}
              type="text"
              placeholder="Type your message..."
              value={draft}
              onChange={(event) => setDraft(event.target.value)}
              className={`flex-1 px-4 py-3 border border-gray-200 rounded-2xl focus:outline-none focus:ring-2 ${styles.ring} focus:border-transparent transition-all duration-200 placeholder:text-gray-400 ${
                isTyping ? "opacity-80" : ""
              }`}
              disabled={isTyping}
            />
            <button
              type="submit"
              className={`px-6 py-3 rounded-2xl font-medium transition-all duration-200 transform shadow-lg ${
                styles.button
              } ${!draft.trim() || isTyping ? "opacity-60 cursor-not-allowed" : "hover:scale-105 active:scale-95"}`}
              disabled={!draft.trim() || isTyping}
            >
              {isTyping ? (
                <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v3m6.364-1.364l-2.121 2.121M21 12h-3m1.364 6.364l-2.121-2.121M12 21v-3M5.636 18.364l2.121-2.121M3 12h3M5.636 5.636l2.121 2.121" />
                </svg>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                </svg>
              )}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ChatWidget;
